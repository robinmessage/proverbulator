{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useJSONRef","file","ref","useRef","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","useEffect","fetch","then","response","json","current","window","voiceList","speechSynthesis","onvoiceschanged","getVoices","forEach","voice","index","push","App","_useState3","_useState4","answers","setAnswers","_useState5","_useState6","proverb","setProverb","proverbLookup","categories","react_default","a","createElement","className","map","v","join","replace","line","key","onClick","select","option","answer","name","category","value","newAnswers","concat","toConsumableArray","address","sort","proverbList","newProverb","Math","floor","random","length","text","msg","SpeechSynthesisUtterance","find","rate","pitch","speak","categoryNames","Set","c","delete","categoryName","values","b","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.117453c0.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction useJSONRef(file) {\n  const ref = useRef(null);\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (loading) {\n      fetch(file)\n        .then(response => response.json())\n        .then(json => {\n          ref.current = json;\n          setLoading(false);\n        });\n    }\n  }, []);\n\n  return ref.current;\n}\n\nif ('speechSynthesis' in window) {\n  var voiceList = [];\n  speechSynthesis.onvoiceschanged = function() {\n    speechSynthesis.getVoices().forEach(function(voice, index) {\n      voiceList.push(voice);\n    });\n  };\n}\n\nfunction speak(text) {\n  var msg = new SpeechSynthesisUtterance();\n  var voice = speechSynthesis.getVoices().find(voice => voice.name === \"Trinoids\");\n  msg.voice = voice;\n  msg.rate = 8.5 / 10;\n  msg.pitch = 0;\n  msg.text = text;\n  \n  speechSynthesis.speak(msg);\n}\n\nfunction App() {\n  const [answers, setAnswers] = useState([]);\n  const [proverb, setProverb] = useState(null);\n\n  function reset() {\n    setProverb(null);\n    setAnswers([]);\n  }\n\n  const proverbLookup = useJSONRef(\"proverbLookup.json\");\n  const categories = useJSONRef(\"categories.json\");\n\n  if (categories === null || proverbLookup === null) {\n    return (\n      <div className=\"App\">\n        <div>Proverbs are loading...</div>\n      </div>\n    );\n  }\n\n  if (proverb !== null) {\n    return (\n      <div className=\"App\">\n        <div className=\"Explanation\">On your question on the topics of {\n          answers.map(a => a.v).join(\", \").replace(/, (?=[^,]*$)/, \" and \")\n        }, Solomon's wisdom is:</div>\n        <div className=\"Proverb\">{proverb.map(line => <div key={line}>{line}</div>)}</div>\n        <a className=\"Instruction\" onClick={reset}>Again</a>\n      </div>\n    );\n  }\n\n  function select(option) {\n    const answer = {name: category.name, v: category[option], value: option === category.a ? 1 : 0};\n    const newAnswers = [...answers, answer];\n    setAnswers(newAnswers);\n    \n    const address = newAnswers.map(a => a.v).sort().join(\",\");\n    const proverbList = proverbLookup[address];\n    if (proverbList) {\n      const newProverb = proverbList[Math.floor(Math.random() * proverbList.length)];\n      setProverb(newProverb);\n      speak(newProverb);\n    }\n  }\n\n  var categoryNames = new Set(categories.map(c => c.name));\n  answers.forEach(answer => categoryNames.delete(answer.name));\n  categoryNames = [...categoryNames.values()];\n\n  var categoryName = categoryNames[Math.floor(Math.random() * categoryNames.length)];\n  \n  var category = categories.find(category => category.name === categoryName);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Explanation\">Choose what your question relates to</div>\n      <a className=\"OptionA\" onClick={() => select(\"a\")}>{category.a}</a>\n      <a className=\"OptionB\" onClick={() => select(\"b\")}>{category.b}</a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}